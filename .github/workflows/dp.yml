name: Deploy to Kubernetes

on:
  push:
    branches:
      - main
      - kustomize

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  OIDC_ROLE_ARN: ${{ secrets.OIDC_ROLE }}
  WEBHOOK_URL: ${{ secrets.WEBHOOK }}
  ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
  KUSTOMIZE_REPO: "Project-Catcher/catcher-service-kusto"
  DEPLOY_ENV: ${{ github.ref == 'refs/heads/main' && 'PROD' || 'DEV' }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions
        role-to-assume: ${{ env.OIDC_ROLE_ARN }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

      # kustomize Î™ÖÎ†πÏùÑ Í∞ÄÏ†∏Ïò®Îã§.
    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1

    - name: Checkout for Kustomize repository
      uses: actions/checkout@v2
      with:
        # kubernetes yaml ÌååÏùº Ï†ÄÏû•
        repository: ${{ env.KUSTOMIZE_REPO }}
        ref: main
        path: catcher-service-kusto

    - name: Set up Kubernetes context
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: Deploy to Kubernetes
      run: |
        if [ "${{ env.DEPLOY_ENV }}" == "PROD" ]; then
          KUSTOMIZE_PATH="catcher-service-kusto/k8s/overlays/production"
          FILE_NAME="production-patch.yaml"
        else
          KUSTOMIZE_PATH="catcher-service-kusto/k8s/overlays/development"
          FILE_NAME="deployment-patch.yaml"
        fi
        
        # Docker Ïù¥ÎØ∏ÏßÄ URL ÏÑ§Ï†ï
        IMAGE_URL="${{ env.ECR_REPO_URL }}:catcher-service"
        cd $KUSTOMIZE_PATH
        
        # deployment.yaml ÌååÏùº ÎÇ¥ Ïù¥ÎØ∏ÏßÄ ÎèôÏ†ÅÏúºÎ°ú ÏÑ§Ï†ï
        sed -i 's|image: "catcher-service:latest"|image: "'"$IMAGE_URL"'"|' "$FILE_NAME"
        
        # KustomizeÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Î∞∞Ìè¨
        kustomize build . | kubectl apply -f -

    - name: Sync ArgoCD Application
      run: argocd app sync catcher-service
      env:
        ARGOCD_AUTH_TOKEN: ${{ env.ARGOCD_AUTH_TOKEN }}
     
    - name: Send Notification
      if: ${{ always() }}
      run: |
        if [[ ${{ job.status }} == "success" ]]; then
          MESSAGE="üè∑ ${{ job.status }} Î∞∞Ìè¨ ÏÑ±Í≥µ: Catcher-service - by ${{ github.actor }}"
        else
          MESSAGE="‚ùå ${{ job.status }} Î∞∞Ìè¨ Ïã§Ìå®: Catcher-service - by ${{ github.actor }}"
        fi
        curl -X POST -H "Content-Type: application/json" --data "{\"text\":\"${MESSAGE}\"}" ${{ env.WEBHOOK_URL }}